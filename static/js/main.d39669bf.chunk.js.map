{"version":3,"sources":["Todos.js","AddForm.js","App.js","serviceWorker.js","index.js"],"names":["Todos","items","deleteItem","itemList","length","map","item","className","key","id","onClick","content","AddForm","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","Math","random","props","addItem","onSubmit","this","type","onChange","placeholder","Component","App","newItems","console","log","newTodos","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAqBeA,EAnBD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAEdC,EAAWF,EAAMG,OACnBH,EAAMI,KAAI,SAAAC,GACN,OACI,yBAAKC,UAAY,kBAAkBC,IAAKF,EAAKG,GAAIC,QAAS,WAAOR,EAAWI,EAAKG,MAC7E,8BAAOH,EAAKK,aAIxB,uBAAGJ,UAAU,kBAAb,2BAEJ,OACI,yBAAKA,UAAU,oBACVJ,ICwBES,E,2MArCXC,MAAQ,CACJF,QAAS,GACTF,GAAI,G,EAGRK,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVL,QAASI,EAAEE,OAAOC,S,EAI1BC,aAAe,SAACJ,GAEZ,GADAA,EAAEK,iBACwB,KAAvB,EAAKP,MAAMF,QAAgB,CAC1B,IAAIF,EAAKY,KAAKC,SACd,EAAKN,SAAS,CACVP,GAAIA,IAER,EAAKc,MAAMC,QAAQ,EAAKX,OACxB,EAAKG,SAAS,CACVL,QAAS,O,wEAMjB,OACI,6BACI,0BAAMc,SAAUC,KAAKP,cACjB,iDACA,2BAAOQ,KAAK,OAAOC,SAAUF,KAAKZ,aAAcI,MAASQ,KAAKb,MAAMF,QAASkB,YAAc,0B,GA/BzFC,aCwCPC,G,iNApCblB,MAAQ,CACNZ,MAAO,CACL,CAACQ,GAAI,EAAGE,QAAS,iBACjB,CAACF,GAAI,EAAGE,QAAS,0B,EAIrBa,QAAU,SAAClB,GACT,IAAI0B,EAAQ,sBAAO,EAAKnB,MAAMZ,OAAlB,CAAyBK,IACrC,EAAKU,SAAS,CACZf,MAAO+B,IAETC,QAAQC,IAAI,EAAKrB,Q,EAGnBX,WAAa,SAACO,GACZ,IAAM0B,EAAW,EAAKtB,MAAMZ,MAAMmC,QAAO,SAAA9B,GACvC,OAAOA,EAAKG,KAAOA,KAGrB,EAAKO,SAAS,CACZf,MAAOkC,K,wEAKT,OACE,yBAAK5B,UAAY,sBACb,wBAAIA,UAAY,iBAAhB,qBACA,kBAAC,EAAD,CAAOL,WAAcwB,KAAKxB,WAAYD,MAAOyB,KAAKb,MAAMZ,QACxD,kBAAC,EAAD,CAASuB,QAAWE,KAAKF,e,GA/BjBM,cCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d39669bf.chunk.js","sourcesContent":["import React from 'react';\n\nconst Todos = ({ items, deleteItem }) => {\n\n    const itemList = items.length ? (\n        items.map(item => {\n            return(\n                <div className = \"collection-item\" key={item.id} onClick={() => {deleteItem(item.id)}}>\n                    <span>{item.content}</span>\n                </div>\n            )\n        })\n    ): (<p className=\"center warning\">You have no todo's left</p>);\n\n    return (\n        <div className=\"todos collection\">\n            {itemList}\n        </div>\n    );\n}\n\nexport default Todos;","import React, { Component } from 'react';\n\nclass AddForm extends Component {\n    state = {\n        content: '',\n        id: 3\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            content: e.target.value\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if(this.state.content !== '') {\n            let id = Math.random();\n            this.setState({\n                id: id\n            });\n            this.props.addItem(this.state);\n            this.setState({\n                content: ''\n            });\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <label>Add New Item: </label>\n                    <input type=\"text\" onChange={this.handleChange} value = {this.state.content} placeholder = \"Enter to submit\"/>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default AddForm;","import React, { Component } from 'react';\nimport Todos from './Todos';\nimport AddForm from './AddForm';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    items: [\n      {id: 1, content: \"buy some milk\"},\n      {id: 2, content: \"Finish math homework\"}\n    ]\n  }\n\n  addItem = (item) => {\n    let newItems = [...this.state.items, item];\n    this.setState({\n      items: newItems\n    });\n    console.log(this.state);\n  }\n\n  deleteItem = (id) => {\n    const newTodos = this.state.items.filter(item => {\n      return item.id !== id\n    });\n\n    this.setState({\n      items: newTodos\n    });\n  }\n\n  render() {\n    return(\n      <div className = \"todo-app container\">\n          <h1 className = \"center header\">Today's Todo List</h1>\n          <Todos deleteItem = {this.deleteItem} items={this.state.items} />\n          <AddForm addItem = {this.addItem}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}